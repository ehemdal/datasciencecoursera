demo()
demo(image)
demo(graphics)
a <- available.packages()
head(rownames(a, 5))
head(rownames((a), 5))
head(rownames((a),3))
head(rownames((a),3)
)
head(rownames(a),3)
install.packages("slidify")
source("http://bioconductor.org/biocLite.R")
biocLite()
install.packages("KernSmooth")
library(KernSmooth)
q()
version()
help.start()
x <- c(17, 14, 4, 5, 13, 12, 10)
print(X)
print (x)
x[x > 10] <-4
print x
print(x)
x <- list(2, "a", "b", TRUE)
x[[1]]]
x[[1]]
y <- x[[1]]
class(y)
x <-c(1,2,NA, 4, NA, NA)
y <-c("a","b",NA,"c",NA,"d")
print(x,y)
print(x)
print (Y)
print (y)
good <-complete.cases(x,y)
good
x[good]
y[good]
q()
library(swirl)
swirl()
0
quit()
library(swirl)
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4,5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind (patients, my_matrix)
set.seed91)
set.seed(1)
rpois(5,2)
?rnorm
?qpois
?qpois
library(datasets)
Rprof()
?system.time
system.time(rpois(5,2))
?rbinom
q()
install.packages("swirl")
library(swirl)
rm(list=ls())
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
q
q()
install.packages(swirl)
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
?read.csv
path2csv
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim()
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?manip
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
cran
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == 
"3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "IN" | country == "US")
filter(cran, size > 100500, r_os == "linux-gnu")
filter(cran, is_na(r_version))
filter(cran, is.na(r_version))
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
help()
save()
?
swirl
swirl()
info()
bye()
q()
swirl()
library(swirl
)
swirl()
swirl()
cran.select(size:ip_id)
select(size:ip_id)
cran2 <- select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id,package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
tbl_df(mydf)
cran <- tbl_df(mydf)
bye()
swirl()
rm("mydf")
cran
bye()
quit()
library(swirl)
ls
ls()
swirl()
?group_by()
?group_by
play()
?dplyr()
?plyr
nxt()
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts,20)
arrange(top_counts,desc(count))
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
play()
?mutate
nxt()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
play()
students
gather(students,sex)
gather(students, sex, count)
gather(students, sex, count, -grade)
students
gather(students, george, ringo, -grade)
nxt()
students2
res <-gather(students2, sex_class, count)
res <-gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex","class")
)
swirl()
submit()
students3
submit()
submit()
?spread
submit()
submit()
submit()
submit()
submit()
info()
play()
stocks <- data.frame(
  time = as.Date('2009-01-01') + 0:9,
  X = rnorm(10, 0, 1),
  Y = rnorm(10, 0, 2),
  Z = rnorm(10, 0, 4)
)
stocks
stocksm <- stocks %>% gather(stock, price, -time)
stocksm
stocksm %>% spread(stock, price)
nxt()
nxt()
submit()
submit()
submit()
reset()
reset()
submit()
students3
  gather(class, grade, class1:class5, na.rm = TRUE)
gather(class, grade, class1:class5, na.rm = TRUE)
gather(students3,class, grade, class1:class5, na.rm = TRUE)
submit()
extract_numeric("class5")
submit()
submit()
submit()
submit()
?mutate
submit()
reset()
submit()
submit()
submit()
?extract_numeric
submit()
submit()
students4
submit
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
?rbind_list
rbind_list(passed, failed)
sat
submit()
submit()
submit()
submit()
q()
bye()
library(httr)
oauth_endpoints("github")
?oauth_app
oauth_app("Quiz2", "dcb33420b2486409ebde", secret = "6d9004d0382ba78ec97e1551fe593d719ac78535")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp
myapp <- oauth_app("Quiz2", "dcb33420b2486409ebde", secret = "6d9004d0382ba78ec97e1551fe593d719ac78535")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token <- github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(reg)
content(req)
res <- content(req)
summary(res)
head(res)
head(res,20)
clear
head(res,20)
class(res)
res[1]
subset(res[,18]
)
subset(res[[,18]]
)
subset(res[[,"created_at"]]
)
class(res)
res[[,"created_at"]]
?write.file
?write
getwd()
setwd("c:\git")
setwd("c:/git")
write(res, "data")
?list
?subset
subset(res,1)
subset(res[1])
res[1]
names(res[1])
naems(res)
names(res)
names(res[[1]])
res[[,name]])
res[[,name]]
res[[,$name]]
res[[,"name"]]
res[[,c(2,45)]]
length(res)
lapply(res, print(name, created_at))
lapply(res, print("name", "created_at"))
res[[1]][["name","created_at"]]
res[[1]]$name
lapply(res, print($name))
lapply(res, print(name))
lapply(res, print(res$name))
print res[[2]]]$name
print res[[2]]$name
 res[[2]]$name
 res[[3]]$name
 res[[4]]$name
 res[[5]]$name
 res[[5]]$created_at
library(sqldf)
install.packages("sqldf")
library(sqldf)
dir()
cd("datasciencecoursera")
setwd("datasciencecoursera")
dir()
setwd("GetCleanData")
dir()
mkdir("quiz2")
create.dir("quiz2")
getwd()
setwd("quiz1")
dir()
acs <- read.csv("ACS2006.csv")
res <- sqldf("select pwgtp1 from acs where AGEP < 50")
res <- sqldf("select * from acs where AGEP < 50 and pwgtp1")
res <- sqldf("select * from acs")
head(res, 10)
head(acs$pwgtp1)
head(acs,2)
acs$AGEP
res <- sqldf("select * from acs where wgtp74 < 50")
head(res,3)
res <- sqldf("select wgtp74 from acs where wgtp74 < 50")
res
res <- sqldf("select distinct wgtp74 from acs")
res
res1 <- unique(acs$wgtp74)
res1
res1
res
identical(res, res1)
class(res)
class(res1)
res1
read.html
?read.html
con <-url("http://biostat.jhsph.edu/~jleek/contact.html"
)
con
htmlcode <- read.lines(con)
htmlcode <- readLines(con)
head(htmlcode)
htmlcode[1]
nchar(htmlcode[c(10,20,30,100)])
?read.file
?read.csv
file <- read.delim("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
con <-"https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
?read.fwf
file <- read.fwf(con)
file <- read.fwf(con, widths=8)
file
con <- url(con)
con
readLines(con)
getwd()
cat("getdata-wksst8110.for")
getwd()
dir()
file <- read.fwf("getdata-wksst8110.for")
file <- read.fwf("getdata-wksst8110.for", skip=4, sep=" ")
file <- read.fwf("getdata-wksst8110.for", skip=4, sep=" ", widths=10)
head(file)
file <- read.fwf("getdata-wksst8110.for", skip=4, sep=" ", widths=15)
head(file)
file <- read.fwf("getdata-wksst8110.for", skip=4, widths=15)
head(file)
file <- read.fwf("getdata-wksst8110.for", skip=3,header=TRUE, widths=15)
head(file)
file <- read.fwf("getdata-wksst8110.for", skip=4, widths=c(-1,9,-5,4,-1,3,-5,4,-1,3,5,4-1,3,-5,4,-1,3)
)
head(file)
file[4]
sum(file[4])
sum(file[5])
sum(file[6])
sum(file[7])
sum(file[2])
sum(file[1])
sum(file[3])
sum(file[5])
sum(file[6])
sum(file[7])
file <- read.fwf("getdata-wksst8110.for", header=TRUE,skip=3, widths=c(-1,9,-5,4,-1,3,-5,4,-1,3,5,4-1,3,-5,4,-1,3)
)
file <- read.fwf("getdata-wksst8110.for", header=TRUE,skip=3,sep=" " widths=c(-1,9,-5,4,-1,3,-5,4,-1,3,5,4-1,3,-5,4,-1,3))
bye()
q()
