rankall("heart failure", 1)
d
class(d)
?data.frame
row.names(d)
ocname
sl
sd2 <-split(d, d[,7])
identical(sd, sd2)
class(sd2)
class(sd2[1])
?lapply
class(sd)
class(sd[1])
class(sd[[1]])
states <- unique(sl)
states
?split
v <-as.vector(sd[[states]])
v <-as.vector(sd[[1:4]])
v <-as.vector(sd[1:4])
class(v)
v[1]
length(sd)
debugSource('C:/git/ProgrammingAssignment3/rankall.R')
debugSource('C:/git/ProgrammingAssignment3/rankall.R')
rankall("heart failure", 1)
length(sd)
length(v)
class(v[1])
class(v[[1]])
v <-as.vector(v)
class(V)
class(v)
class(v[1])
class(v[[1]])
class(sd)
class(sd[1])
class(sd[[1]])
?for
()
debugSource('C:/git/ProgrammingAssignment3/rankall.R')
debugSource('C:/git/ProgrammingAssignment3/rankall.R')
rankall("heart failure", 1)
debugSource('C:/git/ProgrammingAssignment3/rankall.R')
rankall("heart failure", 1)
?data.frame
debugSource('C:/git/ProgrammingAssignment3/rankall.R')
rankall("heart failure", 1)
states
answer
answer
print(answer)
answer[1]
row.names(answwer)
row.names(answer)
?cbind
answer <- data.frame(row.names = states, col.names = c("hospital","state"))
states
?answer
answer
debugSource('C:/git/ProgrammingAssignment3/rankall.R')
debugSource('C:/git/ProgrammingAssignment3/rankall.R')
rankall("heart failure", 1)
answer <-data.frame(row.names=states, col.names=c("hospital","state"))
states
lengh(d)
length(d)
class(d)
rm(states)
rm(result)
debugSource('C:/git/ProgrammingAssignment3/rankall.R')
rankall("heart failure", 1)
length(d)
sl
cn
length(sd)
states
?data.frame
n <- c(2,3,5)
s <-c("AA", "bb","cc")
b <-c(TRUE, FALSE,TRU)
b <-c(TRUE, FALSE,TRUE)
df <- data.frame(n,s,b)
df
?cbind
?data.frame
debugSource('C:/git/ProgrammingAssignment3/rankall.R')
rankall("heart failure", 1)
source('C:/git/ProgrammingAssignment3/rankall.R')
rankall("heart failure", 1)
answer
source('C:/git/ProgrammingAssignment3/rankall.R')
source('C:/git/ProgrammingAssignment3/rankall.R')
debugSource('C:/git/ProgrammingAssignment3/rankall.R')
rankall("heart failure", 1)
ocname
sl
state
rates
rank
result
hospital
state
hospital
state
answer
print(answer)
answer
debugSource('C:/git/ProgrammingAssignment3/rankall.R')
rankall("heart failure", 1)
answer
state
hospital
rankall("heart failure", 1)
source('C:/git/ProgrammingAssignment3/rankall.R')
rankall("heart failure", 1)
answer
debugSource('C:/git/ProgrammingAssignment3/rankall.R')
rankall("heart failure", 1)
debugSource('C:/git/ProgrammingAssignment3/rankall.R')
rankall("heart failure", 1)
length(hospital)
hospital
state
debugSource('C:/git/ProgrammingAssignment3/rankall.R')
debugSource('C:/git/ProgrammingAssignment3/rankall.R')
rankall("heart failure", 1)
debugSource('C:/git/ProgrammingAssignment3/rankall.R')
rankall("heart failure", 1)
answer
answer
source('C:/git/ProgrammingAssignment3/rankall.R')
rankall("heart failure", 1)
source('C:/git/ProgrammingAssignment3/rankall.R')
rankall("heart failure", 1)
source('C:/git/ProgrammingAssignment3/rankall.R')
rankall("heart failure", 1)
head(rankall("heart attack", 20), 10)
warnings()
submit()
submit()
submit()
source('C:/git/ProgrammingAssignment3/rankall.R')
submit()
submit()
submit()
submit()
debugSource('C:/git/ProgrammingAssignment3/rankall.R')
rankall("pneumonia","worst")
length(states)
warnings()
rankall("pneumonia","worst")
debugSource('C:/git/ProgrammingAssignment3/rankall.R')
rankall("pneumonia","worst")
debugSource('C:/git/ProgrammingAssignment3/rankall.R')
rankall("pneumonia","worst")
debugSource('C:/git/ProgrammingAssignment3/rankall.R')
rankall("pneumonia","worst")
state
state
rankhospital("pneumonia","GU", "worst")
rankhospital("GU","pneumonia", "worst")
source('C:/git/ProgrammingAssignment3/rankall.R')
rankall("pneumonia","worst")
submit()
source('C:/git/ProgrammingAssignment3/rankall.R')
rankall("pneumonia","worst")
source('C:/git/ProgrammingAssignment3/rankall.R')
source('C:/git/ProgrammingAssignment3/rankall.R')
rankall("pneumonia","worst")
head(rankall("pneumonia","worst"),10)
debugSource('C:/git/ProgrammingAssignment3/rankall.R')
rankall("pneumonia","worst")
i
num
source('C:/git/ProgrammingAssignment3/rankall.R')
source('C:/git/ProgrammingAssignment3/rankall.R')
rankall("pneumonia","worst")
source('C:/git/ProgrammingAssignment3/rankall.R')
rankall("pneumonia","worst")
submit()
setwd("C:/git/datasciencecoursera/GetCleanData")
?download.file
?download.file
source('C:/git/datasciencecoursera/GetCleanData/run_analysis.R')
source('C:/git/datasciencecoursera/GetCleanData/run_analysis.R')
source('C:/git/datasciencecoursera/GetCleanData/run_analysis.R')
Q
source('C:/git/datasciencecoursera/GetCleanData/run_analysis.R')
source('C:/git/datasciencecoursera/GetCleanData/run_analysis.R')
source('C:/git/datasciencecoursera/GetCleanData/run_analysis.R')
source('C:/git/datasciencecoursera/GetCleanData/run_analysis.R')
rm(list<-ls())
rm(ls())
rm(list=ls())
?download.file
getwd()
download.file(url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",destfile="ACS2006.csv")
ls()
dir()
getwd()
setwd("quiz1")
setwd("./quiz1")
getwd()
setwd("./GetCleanData")
setwd("./quiz1")
dir()
data <- read.csv("./ACS2006.csv")
summary(data)
?read.csv
head(data)
x<-data[,VAL==24]
x<-data[,"VAL"==24]
x
?data
x
x(1)
x[1]
rm(x)
?subset
x <- subset(data, VAL==24)
nrows(x)
x.nrows()
x
?nrows
summary(x)
library(xlsx)
install.packages(xlsx)
?xlsx
install.packages("xlsx")
library(xlsx)
?read.xlsx
dat <- read.xlsx("./NGAP.xlsx", rowIndex=18:23,colIndex=7:15)
dat <- read.xlsx("./NGAP.xlsx", sheetName="NGAP Sample Data", rowIndex=18:23,colIndex=7:15)
x
dat
sum(dat$Zip*dat$Ext,na.rm=T)
?read.xml
install.packages("xml")
install.packages("XML")
?read.xml
dat
dat2 <- read.xlsx("./NGAP.xlsx", sheetName="NGAP Sample Data", rowIndex=18:22,colIndex=7:15)
library(xlsx)
dat2 <- read.xlsx("./NGAP.xlsx", sheetName="NGAP Sample Data", rowIndex=18:22,colIndex=7:15)
getwd()
setwd(./GetCleanData)
setwd("./GetCleanData")
setwd("./quiz1")
dat2 <- read.xlsx("./NGAP.xlsx", sheetName="NGAP Sample Data", rowIndex=18:22,colIndex=7:15)
sum(dat2$Zip*dat2$Ext,na.rm=T)
rm(dat2)
library(XML)
?xmlToDataFrame
getwd()
read.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", "./rest.xml")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", "./rest.xml")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileURL)
doc <- xmlTreeParse("./rest.xml")
doc
names(doc)
rootNode <- xmlRoot(doc)
names(rootNode)
xmlName(rootNode)
rootNode{1}
rootNode[[1]]
rootNode[[1][1]]
rootNode[[1]][[1]]
xmlSApply(rootNode[[1]][[1]],xmlValue)
xpathSApply(rootNode,//zipcode,xmlValue)
xpathSApply(rootNode,"//zipcode",xmlValue)
xpathSApply(rootNode, "//zipcode",xmlValue)
xpathSApply(rootNode, "//$zipcode",xmlValue)
xpathSApply(rootNode, "//row$zipcode",xmlValue)
xpathSApply(rootNode, "//row",xmlValue)
xpathSApply(rootNode, "//row",xmlValue)
names(rootNode)
xpathSApply(rootNode,"/row")
xpathSApply(rootNode,"/row")
xpathSApply(rootNode,"//name")
xpathSApply(rootNode,"//row")
x <-xpathSApply(rootNode,"//row")
class(x)
x$zipcode
subset(x,x$zipcode =="21231"")
)
subset(x,x$zipcode =="21231")
y <-subset(x,x$zipcode =="21231")
y
list()
rm(y)
rm(x)
rows <- xpathSApply(rootNode,"//row")
class(rows)
rows[1]
head(rows)
xpathSapply(rootNode,"//li@class='zipcode'",xmlValue)
xpathSApply(rootNode,"//li@class='zipcode'",xmlValue)
xpathSApply(rootNode,"//li@class='$zipcode'",xmlValue)
xpathSApply(rootNode,"//li$zipcode",xmlValue)
names(rootNode)
rootNode[[1]]
xpathSApply(rootNode[[1]],"//zipcode",xmlValue)
class(rootNode[[1]])
rootNode[[1]][[1]]
xmlSApply(rootNode[[1]][[1]],"//zipcode",xmlValue)
xmlSApply(rootNode[[1]][[1]],"//name",xmlValue)
class(rootNode[[1]][[1]])
class(rootNode[[1]][[1]])
(rootNode[[1]][[1]])
rows <- rootNode[[1]]
class(rows)
rows[[1]]
class(rows)
xpathSApply(rootNode[[1]][[1]],"//zipcode",xmlValue)
xpathSApply(rows,"//zipcode",xmlValue)
rows
rowdoc <- xmlTreeParse(rows)
rm(rows)
lapply(rootNode, print)
names(rootNode[[1]])
names(rootNode[[1]][[1]])
lapply(rootNode[[1]],print )
lapply(rootNode[[1]][[1]],print )
lapply(rootNode[[1]][[1]],print )
?lapply
rootNode[[1]][[1]]
rootNode[[1]][[1]][[1]]
rootNode[[1]][[1]][[2]]
rootNode[[1]][[1:]][[2]]
rootNode[[[1]],][[2]]
rootNode[[1]][[1]][[2]]
xmlSApply(rootNode[[1]][[1]],xmlVale)
xmlSApply(rootNode[[1]][[1]],xmlValue)
xmlSApply(rootNode[[1]],xmlValue)
head(xmlSApply(rootNode[[1]],xmlValue))
head(xpathSApply(rootNode[[1]],"//zipcode",xmlValue))
head(xmlSApply(rootNode[[1]],xmlValue))
head(xpathSApply(rootNode[[1]],"//zipcode",xmlValue))
head(xmlSApply(rootNode[[1]],xmlValue))
?xmlSApply
class(rootNode[[1]])
rests <- xmlParseTree(rootNode[[1]])
rests <- xmlTreeParse(rootNode[[1]])
rests <-rootNode[[1]]
class(rests)
xmlSApply(rests,xmlName)
xmlSApply(rests,xmlValue[2])
xmlSApply(rests,xmlValue)
xmlSApply(rests,xmlValue)
rests["zipcode"]
rests
class(rests)
rests[[2]]
rests[[2]][[2]]
xmlSize(rests)
?lapply
xpathSApply(rests,[[2]], xmlValue)
xpathSApply(rests,2, xmlValue)
xpathSApply(rootNode[[1]],2, xmlValue)
xpathSApply(rootNode,2, xmlValue)
xpathSApply(rootNode, xmlValue)
rootNode[[1]][[1]]
?lappy
?lapply
d <-rootNode[[1]][[1]]
class d
class(d)
xpath(d,"//zipcode",xmlValue)
xpathSApply(d,"//zipcode",xmlValue)
d[[1]]
d[[2]]
rootNode[[[1]],]
rootNode[[1]]
rests[1:2]
xmlSize(rests)
?sapply
rests[[1]][[2]]
class(rests)
L <- as.list(rests)
class(L)
lapply(L,print(L[[2]]))
lapply(L,(L[[1:xmlSize(L)]][[2]]))
head(rootNode,xmlValue)
head(xmlSApply(rootNode,xmlValue))
head(xmlSApply(rootNode[[1]],xmlValue))
head(xmlSApply(rootNode[[1]],"//name",xmlValue))
head(xmlSApply(rootNode,"//name",xmlValue))
xmlSApply(rootNode,"//name",xmlValue)
xmlSApply(rootNode,xmlValue)
xmlSApply(rootNode,"//row",xmlValue)
xmlSApply(rootNode,"/row",xmlValue)
xpathSApply(rootNode,"/row",xmlValue)
xpathSApply(rootNode,"//row",xmlValue)
xpathSApply(rootNode[[1]],"//row",xmlValue)
xpathSApply(rootNode[[1]],"//zipcode",xmlValue)
xpathSApply(rootNode[[1]],"//zipcode",xmlValue)
xpathSApply(rootNode[[1]],xmlValue)
xmlSApply(rootNode[[1]][[2]],xmlValue)
rootNode[[1]][[2]]
xpathSApply(rootNode[[1]][[2]],xmlValue)
xpathSApply(rootNode[[1]],"//row",xmlValue)
xpathSApply(rootNode,"//row",xmlValue)
head(xmlSApply(rootNode,xmlValue))
?xmlSApply
head(xmlSApply(rootNode,xmlValue, rootNode[[1]]))
?xmlValue
head(xmlSApply(rootNode,xmlValue(rootNode[[1]]))
)
head(xmlSApply(rootNode,xmlValue(rootNode[[1]])))
rootNode[[1]][[1]][[2]]
?subset
?XMLNode
doc <- xmlTreeParse("rests.XML", UseInternal= TRUE)
doc <- xmlTreeParse("rests.XML", useInternal= TRUE)
doc <- xmlTreeParse(fileURL, useInternal= TRUE)
fileURL
Internet2=TRUE
dir()
rm(L)
rm(d)
?xmlTreeParse
doc <- xmlTreeParse("rest.XML", useInternal= TRUE)
rootNode <- xmlTreeParse(doc)
rootNode <- rootNode(doc)
rootNode <- xmlRoot(doc)
class(rootNode)
head(rootNode)
xpathSApply(rootNode,"//zipcode",xmlValue)
zips <- xpathSApply(rootNode,"//zipcode",xmlValue)
subset(zips, zips == "21231")
length(subset(zips, zips == "21231"))
getwd()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv","./q5.csv")
?fread
?fread
??fread
dir()
DT <- fread("./q5.csv")
install.packages("fread")
install.packages("data.table")
DT <- fread("./q5.csv")
?fread
big_df <- read.csv("./q5.csv")
head(big_df)
file <-tempfile()
write.table(big_df,file=file)
DT<-fread(file)
DT=fread(file)
?fread
library(data.table)
DT <- fread("./q5.csv")
rm(big_df)
head(DT)
summary(DT)
dplyr(DT)
library(dplyr)
dplyr(DT)
rm(dplyr)
last
head(DT
)
tables()
DT[2,]
DT[,1]
DT[2,]
DT[2,]
DT[c(1,2)]
DT[DT$pwgtp71]
DT[,mean(pwgtp15),by=SEX]
quit()
getwd()
dir()
setwd("GetCleanData")
dir()
source("run_analysis.R")
dir()
source('C:/git/datasciencecoursera/GetCleanData/run_analysis.R')
?download.file
source('C:/git/datasciencecoursera/GetCleanData/run_analysis.R')
source('C:/git/datasciencecoursera/GetCleanData/run_analysis.R')
source('C:/git/datasciencecoursera/GetCleanData/run_analysis.R')
rm(destfile)
source('C:/git/datasciencecoursera/GetCleanData/run_analysis.R')
source('C:/git/datasciencecoursera/GetCleanData/run_analysis.R')
source('C:/git/datasciencecoursera/GetCleanData/run_analysis.R')
dir()
setwd("UCI*")
setwd("UCI HAR Dataset*")
setwd("UCI HAR Dataset")
dir()
setwd("test")
dir()
read.table("X_test.txt")
x_test <- read.table("X_test.txt")
summarize(x_test)
library(dplyr)
summarize(x_test)
head(x_test)
?unzip
getwd()
setwd("../..")
getwd()
dir()
unzip("rawdata.zip")
dir()
getwd()
quit()
source('C:/git/datasciencecoursera/GetCleanData/run_analysis.R')
source('C:/git/datasciencecoursera/GetCleanData/run_analysis.R')
